name: CI/CD

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:

  build_wheels:

    name: Build wheel for ${{matrix.python.cp}}-${{matrix.buildplat.sys}}
          ${{matrix.buildplat.arch}}
    runs-on: ${{ matrix.buildplat.runs_on }}

    strategy:
      matrix:
        buildplat:
          - { runs_on: ubuntu-20.04, sys: manylinux, arch: x86_64, benv: "" }
          - { runs_on: macos-12,     sys: macosx,    arch: x86_64, benv: "10.9" }
          - { runs_on: macos-14,     sys: macosx,    arch: arm64,  benv: "12.0" }
          - { runs_on: windows-2019, sys: win,       arch: AMD64,  benv: "" }
        python:
          - { cp: "cp310",  rel: "3.10" }
          - { cp: "cp311",  rel: "3.11" }
          - { cp: "cp312",  rel: "3.12" }
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.1.1

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      
      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel Cython
    
      - name: Build Wheels (MacOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          CIBW_BUILD: ${{ matrix.python.cp }}-${{ matrix.buildplat.sys }}*
          CIBW_ARCHS: ${{ matrix.buildplat.arch }}
          # Setting CIBW_ENVIRONMENT overrides the environment settings in
          # pyproject.toml and would break the Windows build.  Ideally, we'd
          # set all of them there, but don't know how to pass "benv".
          CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=${{ matrix.buildplat.benv }}"
          AUTH_TOKEN: ${{ github.token }}
        run: python -m cibuildwheel --output-dir wheelhouse

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.python.cp}}-${{matrix.buildplat.sys}}-${{matrix.buildplat.arch}}
          path: wheelhouse/*
    
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: python -m pip install build Cython
      - run: python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
  
  upload:
    needs:
      - build_wheels
      - sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          merge-multiple: true
          path: dist
      - run: python -m pip install twine
      - run: python -m twine upload dist/*
        env:
           TWINE_USERNAME: __token__
           TWINE_PASSWORD: ${{ secrets.PYPI_ACCESS }}
